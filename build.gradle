/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
	// Apply the java plugin to add support for Java
	id 'java'

	id 'base'

	// Apply the application plugin to add support for building a CLI application.
	//id 'application'
	id 'org.openjfx.javafxplugin' version '0.0.9'

	//used to createa  a fat jar that contains our third party dependancies.
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'org.springframework.boot' version '2.7.9' //'3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
}

compileJava.options.encoding = 'UTF-8'



sourceSets {
	main {
		java {
			targetCompatibility=9 // was 9 before services addition
			sourceCompatibility=9
			srcDirs = ['src']
		}
		resources {
			srcDirs =["."]
			include "resources/**/*"
			exclude "resources/KitchenGardenAid.nsi"
		}
	}
	spring{
		resources {
			srcDirs =["spring-resources"]
			include "**/*"
		}
	}
	test{
		java{
			srcDirs = ['test']
			resources {
				srcDirs =["test"]
				include "**/*.seed"
			}
		}
	}
}

repositories {
	// Use jcenter for resolving dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

javafx {
	version = "15.0.1"
	modules = [ 'javafx.controls', 'javafx.web', 'javafx.swing' ]
}

dependencies {
	// This dependency is used by the application.
	implementation 'com.google.guava:guava:28.2-jre'
	implementation ('de.codecentric.centerdevice:javafxsvg:1.3.0'){
		exclude group: 'xml-apis', module: 'xml-apis'
		exclude group: 'org.apache.xmlgraphics', module: 'batik-ext'
	}

	// Use JUnit Jupiter API for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
	testImplementation ('de.codecentric.centerdevice:javafxsvg:1.3.0'){
	}

	// Use JUnit Jupiter Engine for testing.
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	//implementation 'org.springframework.boot:graphql-spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
}

/*application {
    // Define the main class for the application.
    mainClassName = 'org.sourceforge.kga.KitchenGardenAid'
}*/

test {
	// Use junit platform for unit tests
	useJUnitPlatform()
	testLogging.showStandardStreams = true
}


jar {
	manifest {
		attributes 'Implementation-Title': 'Kitchen Garden Aid',
				'Implementation-Version': version,
				'Main-Class': 'org.sourceforge.kga.KitchenGardenAid',
				'Application-Name': 'Kitchen Garden Aid'
	}
	version=version
	archiveBaseName="KitchenGardenAid"
	//destinationDir project.distsDir//File("$distsDir")
}

base{

	distsDirectory = layout.buildDirectory.dir('dist')
}

shadowJar {
	archiveFileName.set('KitchenGardenAid.jar') // Configura el nombre del archivo JAR
	destinationDirectory.set(file("$buildDir/libs")) // Configura el directorio de destino del archivo JAR
	mergeServiceFiles()
	archiveClassifier=''
	exclude '*.dll'
	exclude 'javafx-*.jar'
}

task jlinkWindowsRuntime(type: Exec) {
	dependsOn shadowJar
	onlyIf{
		!file("$projectDir\\JREsForBuild\\windows\\java-runtime").exists()
	}

	workingDir="$projectDir\\JREsForBuild\\windows"
	if (!file(workingDir).exists()){
		file(workingDir).mkdir()
	}
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		System.out.println("Does not exist");
		executable =new File(JAVA_HOME+"\\bin\\jlink");
		args=['--no-header-files',
			  '--no-man-pages','--strip-debug','--no-header-files',
			  '--compress=2',
			  '-p',"javafx-jmods;jdk/jmods",
			  '--add-modules', 'javafx.controls,java.base,java.desktop,java.logging,java.prefs,java.xml,jdk.crypto.ec,javafx.swing,javafx.web',
			  '--output', 'java-runtime']
		/*commandLine 'cmd',
                     '/c',
                     '%JAVA_HOME%\\bin\\jlink',
                     '--no-header-files',
                     '--no-man-pages',
                     '--compress=2',
                     '-p', 'javafx\\lib',
                     '--add-modules', 'javafx.controls,java.base,java.desktop,java.logging,java.prefs,java.xml,jdk.crypto.ec,javafx.swing,javafx.web',
                     '--output', 'build\\lib\\java-runtime'*/
	} else {
		throw new Error("We can only build the windows runtime on windows (Note, docs indicate this is a fixable limitation)");
	}
}

//task buildWindowsRuntime(type: Copy){
//	dependsOn jlinkWindowsRuntime
//    from ("$projectDir\\javafx\\bin"){
//    	include "*.dll"
//    	}
//    into "$distsDir\\java-runtime\\bin"
//}

task copyIconToDist(type: Copy){
	//if (!base.distsDirectory.exists()){
	//	base.distsDirectory.mkdir()
	//}
	from ("$projectDir\\resources"){
		include "*.ico"
	}
	from ("$projectDir"){
		include "gpl.txt"
	}
	from ("$projectDir\\resources"){
		include "*.nsi"
	}
	into "$buildDir/osspecific"

}


task runJar(type: Exec) {
	dependsOn jar,jlinkWindowsRuntime
	group "build"
	//workingDir="$distsDir"
	executable =new File("$projectDir\\JREsForBuild\\windows\\java-runtime\\bin\\java");
	args=['-jar','KitchenGardenAid-'+version+".jar"]
}

task prepWindowsInstaller(type: Copy){
	dependsOn shadowJar,jlinkWindowsRuntime,test,copyIconToDist
	from ("$projectDir\\JREsForBuild\\windows"){
		include "java-runtime/**/*"
		include "java-runtime/*"
	}
	from (base.distsDirectory){
		include "*.jar"
	}
	from ("$projectDir\\resources"){
		include "*.ico"
	}
	into "$buildDir/osspecific/windows"
}

task createWindowsInstaller(type: Exec) {
	dependsOn prepWindowsInstaller
	group "build"
	workingDir="$buildDir/osspecific"
	executable =new File(NSIS_INSTALL_PATH);
	args=['/DRELEASE_VERSION='+version,'/DGIT_VERSION='+getCheckedOutGitCommitHash(), '/DDistDir='+base.distsDirectory.get().getAsFile().getPath(), 'KitchenGardenAid.nsi']
}

task buildlinuxPackage(type: Tar) {
	group = "build"
	dependsOn shadowJar, test // ,createInstaller

	// Configura el nombre del archivo, la base del nombre y la extensión
	archiveBaseName.set("KitchenGardenAid-Linux")
	archiveExtension.set("tgz")
	compression = Compression.GZIP

	destinationDirectory.set(file("$buildDir/distributions"))

	into ('/') {
		from base.distsDirectory.get().asFileTree.matching {
			include '*.jar'
		}
	}
	into ('/') {
		from 'os_specific/linux'
		include '*.sh'
		fileMode 0755
	}
	into ('/') {
		from 'os_specific/linux'
		include 'README'
	}
}

task jlinkMacJavaRuntime(type: Exec) {
	dependsOn shadowJar,test
	group "build"
	onlyIf{
		!file("$projectDir\\JREsForBuild\\macosx\\java-runtime").exists()
	}

	workingDir="$projectDir\\JREsForBuild\\macosx"
	if (!file(workingDir).exists()){
		file(workingDir).mkdir()
	}
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		System.out.println("Does not exist");
		executable =new File(JAVA_HOME+"\\bin\\jlink");
		args=['--no-header-files',
			  '--no-man-pages',
			  '--compress=2',
			  '-p',"jdk/Contents/Home/jmods;javafx-jmods",
			  '--add-modules', 'javafx.controls,java.base,java.desktop,java.logging,java.prefs,java.xml,jdk.crypto.ec,javafx.swing,javafx.web',
			  '--output', 'java-runtime']
	} else {
		throw new Error("We can only build the macos runtime on windows (Note, docs indicate this is a fixable limitation)");
	}
}

task prepMacInstaller(type: Copy){
	dependsOn shadowJar,jlinkMacJavaRuntime,copyIconToDist
	from (base.distsDirectory){
		include "*.jar"
	}
	from ("$buildDir/osspecific"){
		include "*.ico"
	}
	from ("$projectDir/JREsForBuild/macosx"){
		include "java-runtime/**/*"
		include "java-runtime/*"
	}
	from ("$projectDir/os_specific/osx"){
		include "*"
	}
	into "$buildDir/osspecific/macosx"
}

task buildMacosPackage(type: Zip) {
	group = "build"
	dependsOn shadowJar, prepMacInstaller

	// Configura el nombre del archivo y la extensión
	archiveBaseName.set("KitchenGardenAid-Macosx")
	archiveExtension.set("zip")

	// Configura el directorio de destino
	destinationDirectory.set(file("$buildDir/distributions"))

	from("$buildDir/osspecific/macosx") {
		include '**/*'
	}
}


task buildAllInstallers(){
	group "build"
	dependsOn shadowJar,buildMacosPackage,createWindowsInstaller,buildlinuxPackage
}

task oldBuildmacosPackage(type: Exec) {
	dependsOn prepMacInstaller,jlinkMacJavaRuntime
	group "build"
	workingDir="$projectDir"
	executable =new File(JAVA_HOME+"\\bin\\jpackage.exe");
	args=['--type','app-image','--runtime-image','JREsForBuild/macosx/java-runtime','-d','build/osspecific/macosx-out',
		  '-i','build/osspecific/macosx','--main-jar','KitchenGardenAid-'+version+'.jar','--main-class','org.sourceforge.kga.KitchenGardenAid','--verbose',
		  '-n','Kitchen Garden Aid '+version,'--icon','build/osspecific/KitchenGardenAid.ico']
}

//function copied from https://gist.github.com/JonasGroeger/7620911
def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/.git/"
	def takeFromHash = 12
	/*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
	def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
	def isCommit = head.length == 1

	if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

	def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
	refHead.text.trim().take takeFromHash
}